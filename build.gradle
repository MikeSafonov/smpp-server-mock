plugins {
    id "org.sonarqube" version "3.2.0"
    id 'info.solidsoft.pitest' version '1.6.0'
}


wrapper {
    distributionType = Wrapper.DistributionType.ALL
    gradleVersion = "6.1"
}

subprojects {
    apply plugin: "java"
    apply plugin: "jacoco"
    apply plugin: "org.sonarqube"
    apply plugin: "info.solidsoft.pitest"
    apply plugin: "java-library"
    apply plugin: "maven"
    apply plugin: "signing"

    sourceCompatibility = "1.8"
    [compileJava, compileTestJava]*.options*.encoding = "UTF-8"

    group = "com.github.mikesafonov"
    version "1.5.0"

    jar {
        enabled = true
    }

    repositories {
        mavenCentral()
    }

    dependencies {
        compileOnly("org.projectlombok:lombok:1.18.18")
        annotationProcessor("org.projectlombok:lombok:1.18.10")

        testImplementation("org.assertj:assertj-core:3.20.2")
        testImplementation("org.junit.jupiter:junit-jupiter:5.7.1")
        testImplementation("org.mockito:mockito-core:4.5.0")
    }

    task sourceJar(type: Jar) {
        classifier "sources"
        from sourceSets.main.allJava
    }

    javadoc {
        options.encoding = "UTF-8"
    }

    task javadocJar(type: Jar, dependsOn: javadoc) {
        classifier "javadoc"
        from javadoc.destinationDir
    }

    artifacts {
        archives sourceJar
        archives javadocJar
    }

    signing {
        sign configurations.archives
    }

    // Build, sign, and upload
    uploadArchives {
        repositories {
            mavenDeployer {

                // Sign POM
                beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }

                // Destination
                repository(url: "https://oss.sonatype.org/service/local/staging/deploy/maven2") {
                    authentication(userName: sonatypeUsername, password: sonatypePassword)
                }

                // Add required metadata to POM
                pom.artifactId = "${projectName}"
                pom.project {
                    name "${projectName}"
                    packaging "jar"
                    description "${projectDescription}"
                    url "https://github.com/MikeSafonov/smpp-server-mock"
                    organization {
                        name "com.github.mikesafonov"
                        url "https://github.com/MikeSafonov"
                    }
                    issueManagement {
                        system "GitHub"
                        url "https://github.com/MikeSafonov/smpp-server-mock/issues"
                    }
                    licenses {
                        license {
                            name "MIT"
                            url "https://github.com/MikeSafonov/smpp-server-mock/blob/master/LICENSE"
                            distribution "repo"
                        }
                    }
                    scm {
                        url "https://github.com/MikeSafonov/smpp-server-mock"
                        connection "scm:git:git://github.com/MikeSafonov/smpp-server-mock.git"
                        developerConnection "scm:git:ssh://git@github.com:MikeSafonov/smpp-server-mock.git"
                    }
                    developers {
                        developer {
                            name "Mike Safonov"
                            organization "com.github.mikesafonov"
                            organizationUrl "https://github.com/MikeSafonov"
                        }
                    }
                }
            }
        }
    }

    jacoco {
        toolVersion = "0.8.5"
    }

    jacocoTestReport {
        reports {
            xml.enabled = true
            csv.enabled = false
        }
    }

    test {
        useJUnitPlatform()
        finalizedBy jacocoTestReport
    }

    pitest {
        junit5PluginVersion = "0.14"
        targetClasses = ["com.github.mikesafonov.smpp.*"]
        threads = 4
        outputFormats = ["HTML", "XML"]
        enableDefaultIncrementalAnalysis = true
        timestampedReports = false
        historyInputLocation = ".pitest/pitHistory.txt"
        historyOutputLocation = ".pitest/pitHistory.txt"
    }
}


sonarqube {
    properties {
        property 'sonar.host.url', 'https://sonarcloud.io'
        property 'sonar.organization', 'mikesafonov-github'
        property 'sonar.projectKey', 'MikeSafonov_smpp-server-mock'
        property 'sonar.projectName', 'smpp-server-mock'
        property 'sonar.projectVersion', '1.5.0'
        property 'sonar.coverage.jacoco.xmlReportPaths', 'module-core/build/reports/jacoco/test/jacocoTestReport.xml, module-junit/build/reports/jacoco/test/jacocoTestReport.xml, module-spring-boot/build/reports/jacoco/test/jacocoTestReport.xml,module-assertj/build/reports/jacoco/test/jacocoTestReport.xml'
        property 'sonar.java.binaries', 'module-core/build/classes,module-junit/build/classes, module-spring-boot/build/classes,module-assertj/build/classes'
        property 'sonar.links.homepage', 'https://github.com/MikeSafonov/smpp-server-mock'
        property 'sonar.links.ci', 'https://github.com/MikeSafonov/smpp-server-mock'
        property 'sonar.links.scm', 'https://github.com/MikeSafonov/smpp-server-mock'
        property 'sonar.links.issue', 'https://github.com/MikeSafonov/smpp-server-mock/issues'
    }
}
